import numpy as np
import simpleaudio as sa
from scipy.io.wavfile import read

# Read audio file
a = read("ss3.wav")
np.array(a[1],dtype=np.int16)
# Take only audio part
c = a[1]
# Duplicate - 1 processing, 1 original  
c = c.copy(order='C')
d = c.copy(order='C')
# Int to float 
c = c /  np.max(np.abs(c))
d = d /  np.max(np.abs(d))
# Lower volume of original version 
d = np.int16 (d* (2**15 - 1) / np.max(np.abs(d)*4))


# Left and right audio buffers 
c_1 = c[:,0]
c_2 = c[:,1]
# Lower volume of left and right channels 
c_1 = np.int16 (c_1 * (2**15 - 1) / np.max(np.abs(c_1)*8))
c_2 = np.int16 (c_2 * (2**15 - 1) / np.max(np.abs(c_2)*8))

# Q1
k1= np.linspace(4,0.5,len(c_1)) 
k2= np.linspace(0.,4,len(c_2)) 
#float to int
c_1 =  np.int16 (c_1*k1)
c_2 =  np.int16 (c_2*k2)

# Q2
j= 0 
for i in range(len(c_2)) : 
    
    if(i% (int(0.1*len(c_2))) == 0 ) :
        for k in range(j) : 
            np.insert(c_2,i,c_2[i-1])
        j = j +1800
# concat arrays
c = [c_1,c_2[0:len(c_1)]]
c = np.asarray(c)
c= np.transpose(c)
c = c.copy(order='C')
# Start playback
fs = 48000


#play original sound
play_obj = sa.play_buffer(d, 2, 2, fs)
play_obj.wait_done()


# play processed sound
play_obj = sa.play_buffer(c, 2, 2, fs)
play_obj.wait_done()
